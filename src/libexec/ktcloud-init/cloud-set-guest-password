#!/bin/bash
#
# Init file for Password Download Client
#
# chkconfig: 345 98 02
# description: Password Download Client

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# Modify this line to specify the user (default is root)
user=root

. "$(dirname "${BASH_SOURCE[0]}")/common"

# Add your DHCP lease folders here
PASSWORD_SERVER_PORT=8080
password_received=0
file_count=0
error_count=0
PASSWORD_SERVER_IPs=( $(get_dhcpopt dhcp-server-identifier) $(get_dhcpopt routers) )
PASSWORD_SERVER_IP=""

if [ ${#PASSWORD_SERVER_IPs[@]} -eq 0 ] ; then
         echo "Unable to determine the password server, falling back to data-server"
         PASSWORD_SERVER_IPs+=data-server
fi

for PASSWORD_SERVER_IP in "${PASSWORD_SERVER_IPs[@]}"
do
    echo "Sending request to password server at $PASSWORD_SERVER_IP"
    password=$(curl -Ls --retry 3 -m 20 --header "DomU_Request: send_my_password" http://$PASSWORD_SERVER_IP:$PASSWORD_SERVER_PORT)
    if [ $? -eq 0 ]; then
            password=$(echo $password | tr -d '\r')
            echo "Got response from server at $PASSWORD_SERVER_IP"

            case $password in
                    "")
                            echo "Password server at $PASSWORD_SERVER_IP did not have any password for the VM"
                            ;;
                    "bad_request")
                            echo "VM sent an invalid request to password server at $PASSWORD_SERVER_IP"
                            error_count=$((error_count+1))
                            ;;
                    "saved_password")
                            echo "VM has already saved a password from the password server at $PASSWORD_SERVER_IP"
                            ;;
                    *)
                            echo "VM got a valid password from server at $PASSWORD_SERVER_IP"
                            password_received=1
                            break;
                            ;;
                    esac
    else
            echo "Failed to send request to password server at $PASSWORD_SERVER_IP"
            error_count=$((error_count+1))
    fi
done

if [ "$password_received" == "0" ]; then
	if [ "$error_count" == "$file_count" ]; then
		echo "Failed to get password from any server"
		exit 1
	else
		echo "Did not need to change password."
		exit 0
	fi
fi

echo "Changing password for user $user"
echo $user:$password | chpasswd

if [ $? -gt 0 ]; then
	usermod -p `mkpasswd -m SHA-512 $password` $user

	if [ $? -gt 0 ]; then
		echo "Failed to change password for user $user"
		exit 1
	else
		echo "Successfully changed password for user $user"
	fi
fi

echo "Sending acknowledgment to password server at $PASSWORD_SERVER_IP"
curl -Ls --retry 3 -m 20 --header "DomU_Request: saved_password" http://$PASSWORD_SERVER_IP:$PASSWORD_SERVER_PORT
exit 0
